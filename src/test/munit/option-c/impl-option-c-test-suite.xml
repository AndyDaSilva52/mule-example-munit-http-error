<?xml version="1.0" encoding="UTF-8"?>

<mule
  xmlns:http="http://www.mulesoft.org/schema/mule/http"
  xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
  xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
  xmlns="http://www.mulesoft.org/schema/mule/core"
  xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
  xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd 
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd 
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
  <munit:config name="impl-option-c-test-suite.xml" />


  <munit:test
    name="impl-option-c-test-suite-without-error-with-attributes-payload"
    description="Test"
    expectedErrorType="HTTP:NOT_FOUND">
    <munit:behavior>
      <munit-tools:mock-when
        doc:name="Mock HTTP Request"
        processor="http:request">
        <munit-tools:with-attributes>
          <munit-tools:with-attribute
            whereValue="Request"
            attributeName="doc:name" />
        </munit-tools:with-attributes>
        <munit-tools:then-return>
          <munit-tools:error typeId="HTTP:NOT_FOUND" />
        </munit-tools:then-return>
      </munit-tools:mock-when>
    </munit:behavior>
    <munit:execution>
      <flow-ref
        doc:name="Flow-ref to test-mock-downstream-http-error-response-flow"
        name="test-mock-downstream-http-error-response-flow" />
    </munit:execution>
    <munit:validation>
      <munit-tools:verify-call
        doc:name="Transform extract downstream api error description"
        processor="ee:transform">
        <munit-tools:with-attributes>
          <munit-tools:with-attribute
            whereValue="gdirs"
            attributeName="doc:id" />
        </munit-tools:with-attributes>
      </munit-tools:verify-call>
    </munit:validation>
  </munit:test>


  <http:request-config
    name="Test_Error_Status_Codes_HTTP_Request_configuration"
    doc:name="HTTP Request configuration"
    responseTimeout="120000">
    <http:request-connection
      host="localhost"
      port="8888" />
  </http:request-config>
  <http:listener-config
    name="Test_Error_Status_Codes_HTTP_Listener_config"
    doc:name="HTTP Listener config">
    <http:listener-connection
      host="localhost"
      port="8888" />
  </http:listener-config>

  <flow name="test-mock-http-call-error-404">
    <http:request
      method="GET"
      doc:name="GET /mock 404"
      config-ref="Test_Error_Status_Codes_HTTP_Request_configuration"
      path="/mock">
      <http:body><![CDATA[#[null]]]></http:body>
      <http:query-params><![CDATA[#[output application/java
---
{
  "expectedStatusCode" : 404
}]]]></http:query-params>
    </http:request>
  </flow>



  <flow name="test-mock-http-call-error-responses">
    <http:listener
      doc:name="Listener"
      config-ref="Test_Error_Status_Codes_HTTP_Listener_config"
      path="/mock">
      <http:response statusCode="#[vars.httpStatus default 200]" />
      <http:error-response statusCode="#[vars.httpStatus default 500]" />
    </http:listener>
    <raise-error
      doc:name="Raise error: TEST:EXCEPTION"
      type="TEST:EXCEPTION" />
    <error-handler>
      <on-error-continue
        enableNotifications="true"
        logException="true"
        doc:name="On Error Continue"
        type="TEST:EXCEPTION">
        <set-variable
          value="#[attributes.queryParams.expectedStatusCode]"
          doc:name="Set Variable: httpStatus"
          variableName="httpStatus" />
        <ee:transform doc:name="Test Exception payload">
          <ee:message>
            <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
  code: 'test_exception',
  description: 'Some error message here.'
}]]></ee:set-payload>
          </ee:message>
        </ee:transform>
      </on-error-continue>
    </error-handler>
  </flow>


  <munit:test
    name="test-mock-downstream-http-error-response-flow-test"
    description="Test">
    <munit:enable-flow-sources>
      <munit:enable-flow-source
        value="test-mock-http-call-error-responses" />
    </munit:enable-flow-sources>
    <munit:behavior>
      <munit-tools:mock-when
        doc:name="Mock HTTP Request"
        processor="http:request">
        <munit-tools:with-attributes>
          <munit-tools:with-attribute
            whereValue="Request"
            attributeName="doc:name" />
        </munit-tools:with-attributes>
        <munit-tools:then-call flow="test-mock-http-call-error-404" />
      </munit-tools:mock-when>
    </munit:behavior>
    <munit:execution>
      <flow-ref
        doc:name="test-mock-downstream-http-error-response-flow"
        name="test-mock-downstream-http-error-response-flow" />
    </munit:execution>
    <munit:validation>
      <munit-tools:assert-equals
        doc:name="Assert errorDescription"
        actual="#[payload.errorDescription]"
        expected="#['Some error message here.']" />
    </munit:validation>
  </munit:test>
</mule>
