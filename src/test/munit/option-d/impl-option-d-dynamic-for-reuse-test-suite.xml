<?xml version="1.0" encoding="UTF-8"?>

<mule
  xmlns:tracing="http://www.mulesoft.org/schema/mule/tracing"
  xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
  xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
  xmlns="http://www.mulesoft.org/schema/mule/core"
  xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
  xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/tracing http://www.mulesoft.org/schema/mule/tracing/current/mule-tracing.xsd">
  <munit:config name="impl-option-d-dynamic-for-reuse-test-suite.xml" />

  <flow name="impl-option-d-main-for-dynamic-reuse-test-suiteFlow">
    <logger
      level="INFO"
      doc:name="doc: This is the main flow that can be reused with a variable defining the error structure to be mocked" />
    <ee:transform
      doc:name="define munitHttpError looking to define default values in case it didn't">
      <ee:message>
        <ee:set-payload><![CDATA[%dw 2.0
output application/java
---
{
	description: vars.munitHttpError.description default 'Not Defined',
	errorType  : vars.munitHttpError.errorType default java!org::mule::extension::http::api::error::HttpError::INTERNAL_SERVER_ERROR,
	payload    : vars.munitHttpError.payload default {},
}]]></ee:set-payload>
      </ee:message>
    </ee:transform>
    <try doc:name="Try">
      <munit:set-event
        doc:name="Generate error with exception = resources/option-d/httpErrorDynamic.dwl"
        cloneOriginalEvent="true">
        <munit:error
          id="HTTP:INTERNAL_SERVER_ERROR"
          exception="#[${file::option-d/httpErrorDynamic.dwl}]" />
      </munit:set-event>
      <munit:set-event
        doc:name="Generate error with exception = inline java http exception"
        cloneOriginalEvent="true">
        <munit:error
          id="HTTP:INTERNAL_SERVER_ERROR"
          exception="#[java!org::mule::extension::http::api::request::validator::ResponseValidatorTypedException::new(vars.munitHttpError.description,  vars.munitHttpError.errorType, java!org::mule::runtime::api::message::Message::of(  java!org::mule::runtime::api::metadata::TypedValue::new( write(vars.munitHttpError.payload,'application/json',{indent:false}), java!org::mule::runtime::api::metadata::DataType::JSON_STRING ) ) )]" />
      </munit:set-event>
      <error-handler>
        <on-error-propagate
          enableNotifications="true"
          logException="true"
          doc:name="On Error Propagate">
          <remove-variable
            doc:name="munitHttpError ( remove the context for munitHttpErro in case there is another mock right ahead )"
            variableName="munitHttpError" />
        </on-error-propagate>
      </error-handler>
    </try>
    <remove-variable
      doc:name="munitHttpError ( remove the context for munitHttpErro in case there is another mock right ahead )"
      variableName="munitHttpError" />
  </flow>
  <munit:test
    name="test-test-suite-test-dynamic-FlowTest"
    timeOut="9000000">
    <munit:enable-flow-sources>
      <munit:enable-flow-source
        value="impl-option-d-main-for-dynamic-reuse-test-suiteFlow" />
      <munit:enable-flow-source
        value="impl-option-d-mock-test-test-suite-test-dynamic-FlowTest" />
    </munit:enable-flow-sources>
    <munit:behavior>
      <munit-tools:mock-when
        doc:name="Request -&gt; then call"
        processor="http:request">
        <munit-tools:with-attributes>
          <munit-tools:with-attribute
            whereValue="GET"
            attributeName="method" />
          <munit-tools:with-attribute
            whereValue="http://example.com/some-resource"
            attributeName="url" />
        </munit-tools:with-attributes>
        <munit-tools:then-call
          flow="impl-option-d-mock-test-test-suite-test-dynamic-FlowTest" />
      </munit-tools:mock-when>
    </munit:behavior>
    <munit:execution>
      <flow-ref
        doc:name="Flow-ref to testFlow"
        name="test2Flow" />
    </munit:execution>
    <munit:validation>
      <munit-tools:verify-call
        doc:name="Logger Some logic for CODE_B"
        processor="logger">
        <munit-tools:with-attributes>
          <munit-tools:with-attribute
            whereValue="Some logic for CODE_B"
            attributeName="doc:name" />
        </munit-tools:with-attributes>
      </munit-tools:verify-call>
      <!-- [STUDIO:"Assert that"]<munit-tools:assert-that
        doc:name="Assert that"
        message="#[&quot;error.errorType.identifier [$(error.errorType.identifier default '')&#93; is not equal to INTERNAL_SERVER_ERROR&quot;&#93;"
        expression="#[error.errorType.identifier&#93;"
        is='#[MunitTools::equalTo("INTERNAL_SERVER_ERROR")&#93;' /> [STUDIO] -->
    </munit:validation>
  </munit:test>
  <flow name="impl-option-d-mock-test-test-suite-test-dynamic-FlowTest">
    <ee:transform
      doc:name="munitHttpError {description , errorType , payload };">
      <ee:message>
      </ee:message>
      <ee:variables>
        <ee:set-variable variableName="munitHttpError"><![CDATA[%dw 2.0
output application/java
---
{
	description: 'Internal Server Error',
	errorType  : java!org::mule::extension::http::api::error::HttpError::INTERNAL_SERVER_ERROR,
	payload    : {
		"errorCode": "CODE_B"
	}
}]]></ee:set-variable>
      </ee:variables>
    </ee:transform>
    <flow-ref
      doc:name="FlowRef impl-option-d-main-for-dynamic-reuse-test-suiteFlow"
      name="impl-option-d-main-for-dynamic-reuse-test-suiteFlow" />
  </flow>
</mule>
